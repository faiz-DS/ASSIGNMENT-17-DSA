class Node:
    def __init__(self, val):
        self.val = val
        self.prev = None
        self.next = None

class FrontMiddleBackQueue:
    def __init__(self):
        self.head = None
        self.tail = None
        self.size = 0

    def pushFront(self, val: int) -> None:
        new_node = Node(val)
        if not self.head:
            self.head = new_node
            self.tail = new_node
        else:
            new_node.next = self.head
            self.head.prev = new_node
            self.head = new_node
        self.size += 1

    def pushMiddle(self, val: int) -> None:
        if self.size == 0:
            self.pushFront(val)
        else:
            mid = self.size // 2
            curr = self.head
            for _ in range(mid):
                curr = curr.next
            new_node = Node(val)
            new_node.next = curr.next
            new_node.prev = curr
            if curr.next:
                curr.next.prev = new_node
            curr.next = new_node
            self.size += 1

    def pushBack(self, val: int) -> None:
        new_node = Node(val)
        if not self.tail:
            self.head = new_node
            self.tail = new_node
        else:
            new_node.prev = self.tail
            self.tail.next = new_node
            self.tail = new_node
        self.size += 1

    def popFront(self) -> int:
        if self.size == 0:
            return -1
        val = self.head.val
        self.head = self.head.next
        if self.head:
            self.head.prev = None
        else:
            self.tail = None
        self.size -= 1
        return val

    def popMiddle(self) -> int:
        if self.size == 0:
            return -1
        mid = self.size // 2
        curr = self.head
        for _ in range(mid):
            curr = curr.next
        val = curr.val
        if curr.prev:
            curr.prev.next = curr.next
        if curr.next:
            curr.next.prev = curr.prev
        self.size -= 1
        return val

    def popBack(self) -> int:
        if self.size == 0:
            return -1
        val = self.tail.val
        self.tail = self.tail.prev
        if self.tail:
            self.tail.next = None
        else:
            self.head = None
        self.size -= 1
        return val

# Test the class with the given example:
q = FrontMiddleBackQueue()
print(q.pushFront(1))   # Output: None
print(q.pushBack(2))    # Output: None
print(q.pushMiddle(3))  # Output: None
print(q.pushMiddle(4))  # Output: None
print(q.popFront())     # Output: 1
print(q.popMiddle())    # Output: 3
print(q.popMiddle())    # Output: 4
print(q.popBack())      # Output: 2
print(q.popFront())     # Output: -1
