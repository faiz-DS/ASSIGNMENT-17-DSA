def max_subarray_sum_circular(nums):
    def kadane(arr):
        max_sum = float('-inf')
        current_sum = 0
        for num in arr:
            current_sum = max(num, current_sum + num)
            max_sum = max(max_sum, current_sum)
        return max_sum
    
    # Case 1: Maximum subarray sum without circular wrapping
    max_without_wrap = kadane(nums)
    
    # Case 2: Maximum subarray sum with circular wrapping
    total_sum = sum(nums)
    # Invert the sign of each element in the array to find the minimum subarray sum
    inverted_nums = [-num for num in nums]
    max_with_wrap = total_sum + kadane(inverted_nums)
    
    # Return the maximum of the two cases
    return max(max_without_wrap, max_with_wrap)

# Test the function with the given examples:
print(max_subarray_sum_circular([1, -2, 3, -2]))  # Output: 3
print(max_subarray_sum_circular([5, -3, 5]))  # Output: 10
print(max_subarray_sum_circular([-3, -2, -3]))  # Output: -2
